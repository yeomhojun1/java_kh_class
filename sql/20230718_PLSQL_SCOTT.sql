SET SERVEROUTPUT ON;
DECLARE

EMP_ID NUMBER;
EMP_NAME VARCHAR2(30);

BEGIN

EMP_ID := 888;
EMP_NAME := '배장남';
DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID);
DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || EMP_NAME);

END;
/
DECLARE

EMP_ID EMPLOYEE.EMP_ID%TYPE;
EMP_NAME EMPLOYEE.EMP_NAME%TYPE;

BEGIN

SELECT EMP_ID, EMP_NAME
INTO EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = '&EMP_ID';
DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID);
DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || EMP_NAME);

END;
/
DECLARE

E EMPLOYEE%ROWTYPE;

BEGIN

SELECT * INTO E
FROM EMPLOYEE
WHERE EMP_ID = '&EMP_ID';
DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || E.EMP_ID);
DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || E.EMP_NAME);
DBMS_OUTPUT.PUT_LINE('EMP_NO : ' || E.EMP_NO);
DBMS_OUTPUT.PUT_LINE('SALARY : ' || E.SALARY);

END;
/
declare
--    dno dept.deptno%type;
--     dmn dept.dname%type;
--      dloc dept.loc%type;

       
begin
insert into dept values('&deptno','&부서명','&지역');
commit;
end;
/

CREATE OR REPLACE PROCEDURE PRO_DEPT_INSERT
IS BEGIN
insert into dept values('&deptno','&부서명','&지역');
COMMIT;
END;
/
SELECT * FROM USER_PROCEDURES;
SELECT * FROM DEPT;
declare
--    dno dept.deptno%type;
--     dmn dept.dname%type;
--      dloc dept.loc%type;

       
begin
select max(deptno) into maxdno from dept;
insert into dept (dname, deptno, loc) values ('ej5', maxdno+1, '서울');
insert into dept (dname, deptno, loc) values ('ej5', maxdno+2, '서울');

commit;
end;
/
DECLARE

E EMPLOYEE%ROWTYPE;

BEGIN

SELECT * INTO E
FROM EMPLOYEE
WHERE EMP_ID = '&EMP_ID';
DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || E.EMP_ID);
DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || E.EMP_NAME);
DBMS_OUTPUT.PUT_LINE('EMP_NO : ' || E.EMP_NO);
DBMS_OUTPUT.PUT_LINE('SALARY : ' || E.SALARY);

END;
/

DECLARE

TYPE EMP_ID_TABLE_TYPE IS TABLE OF EMPLOYEE.EMP_ID%TYPE
INDEX BY BINARY_INTEGER;
TYPE EMP_NAME_TABLE_TYPE IS TABLE OF EMPLOYEE.EMP_NAME%TYPE
INDEX BY BINARY_INTEGER;
EMP_ID_TABLE EMP_ID_TABLE_TYPE;
EMP_NAME_TABLE EMP_NAME_TABLE_TYPE;
I BINARY_INTEGER := 0;

BEGIN

FOR K IN (SELECT EMP_ID, EMP_NAME FROM EMPLOYEE) LOOP

I := I + 1;
EMP_ID_TABLE(I) := K.EMP_ID;
EMP_NAME_TABLE(I) := K.EMP_NAME;

END LOOP;
FOR J IN 1..I LOOP

DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID_TABLE(J) || ',

EMP_NAME : ' || EMP_NAME_TABLE(J));

END LOOP;

END;
/
DECLARE

EMP_ID EMPLOYEE.EMP_ID%TYPE;
EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
SALARY EMPLOYEE.SALARY%TYPE;
BONUS EMPLOYEE.BONUS%TYPE;

BEGIN

SELECT EMP_ID, EMP_NAME, SALARY, NVL(BONUS, 0)
INTO EMP_ID, EMP_NAME, SALARY, BONUS
FROM EMPLOYEE
WHERE EMP_ID = '&EMP_ID';
DBMS_OUTPUT.PUT_LINE('사번 : ' || EMP_ID);
DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP_NAME);
DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
IF(BONUS = 0) THEN 
    DBMS_OUTPUT.PUT_LINE('보너스를 지급받지 않는 사원입니다.');
    DBMS_OUTPUT.PUT_LINE('보너스를 지급받지 않는 사원입니다.');
END IF;
DBMS_OUTPUT.PUT_LINE('보너스율 : ' || BONUS * 100 || '%');

END;
/

DECLARE
    EMP_ID EMPLOYEE.EMP_ID%TYPE;
    EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
    DEPT_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    NATIONAL_CODE LOCATION.NATIONAL_CODE%TYPE;
    TEAM VARCHAR2(20);
BEGIN
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE, NATIONAL_CODE
    INTO EMP_ID, EMP_NAME, DEPT_TITLE, NATIONAL_CODE
    FROM EMPLOYEE E, DEPARTMENT D, LOCATION L
    WHERE E.DEPT_CODE =D.DEPT_ID
        AND D.LOCATION_ID = L.LOCAL_CODE
        AND EMP_ID = '&EMP_ID';
        
        IF(NATIONAL_CODE = 'KO')THEN TEAM :='국대팀';
        ELSE TEAM :='해외팀';
        END IF;
        
        DBMS_OUTPUT.PUT_LINE('사번 : ' || EMP_ID);
DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP_NAME);
DBMS_OUTPUT.PUT_LINE('부서 : ' || DEPT_TITLE);
DBMS_OUTPUT.PUT_LINE('소속 : ' || TEAM);

END;
/

DECLARE
    SCORE INT;
    GRADE VARCHAR2(2);
BEGIN
    SCORE :='&SCORE';
    IF SCORE >=90 THEN GRADE :='A';
       ELSIF SCORE >=80 THEN GRADE :='B';
       ELSIF SCORE >=70 THEN GRADE :='C';
       ELSIF SCORE >=60 THEN GRADE :='D';
       ELSE GRADE :='F';
       END IF;
       DBMS_OUTPUT.PUT_LINE('당신의 점수는 ' || SCORE || '점이고,
학점은 ' || GRADE || '학점입니다.');

END;
/

DECLARE

N NUMBER := 1;

BEGIN

LOOP

DBMS_OUTPUT.PUT_LINE(N);
N := N + 1;

IF N > 5 THEN EXIT;
END IF;
END LOOP;

END;
/

BEGIN

FOR N IN 1..5 LOOP

DBMS_OUTPUT.PUT_LINE(N);

END LOOP;

END;
/

BEGIN

FOR N IN REVERSE 1..5 LOOP

DBMS_OUTPUT.PUT_LINE(N);

END LOOP;

END;
/

DECLARE

N NUMBER := 0;

BEGIN

WHILE N < 5 LOOP

N := N + 1;
DBMS_OUTPUT.PUT_LINE(N);

END LOOP;

END;
/

DECLARE

DUP_EMPNO EXCEPTION;
PRAGMA EXCEPTION_INIT(DUP_EMPNO, -00001);
NONEXIST_TABLEVIEW EXCEPTION;
PRAGMA EXCEPTION_INIT(NONEXIST_TABLEVIEW, -00942)

BEGIN

UPDATE EMPLOYEE22
SET EMP_ID = '&사번'
WHERE EMP_ID = 200;

EXCEPTION

WHEN DUP_EMPNO
THEN DBMS_OUTPUT.PUT_LINE('이미 존재하는 사번입니다000000.');
WHEN NONEXIST_TABLEVIEW
THEN DBMS_OUTPUT.PUT_LINE('이미 존재하는 사번입니다01111.');

END;
/

SELECT * FROM USER_SOURCE;

--PROCEDURE 만들기
--사원번호를 조회해서 이름, 급여, 업무를 반환함.
CREATE OR REPLACE PROCEDURE PRO_EMP_ARG_TEST
    (ARG_EMPNO IN  EMP.EMPNO%TYPE, ARG_ENAME OUT EMP.ENAME%TYPE )
IS

BEGIN
    DBMS_OUTPUT.PUT_LINE('ARG_EMPNO : '||ARG_EMPNO);
    ARG_EMPNO := '아무거나 리턴되나 확인';
     DBMS_OUTPUT.PUT_LINE('ARG_EMPNO : '||ARG_EMPNO);
END;
/
VARIABLE VAR_ENAME VARCHAR2(30);
--PROCEDURE 실행
EXEC PRO_EMP_ARG_TEST(7788 , :VAR_ENAME); 
--출력
PRINT VAR_ENAME;
/

CREATE OR REPLACE PROCEDURE PRO_EMP_ARG_TEST1
    (ARG_EMPNO IN  EMP.EMPNO%TYPE
    , ARG_ENAME OUT EMP.ENAME%TYPE
     , ARG_SAL OUT EMP.SAL%TYPE
      , ARG_JOB OUT EMP.JOB%TYPE )
IS

BEGIN
    DBMS_OUTPUT.PUT_LINE('ARG_EMPNO : '||ARG_EMPNO);
   SELECT ENAME, SAL, JOB
   INTO ARG_ENAME,ARG_SAL,ARG_JOB
   FROM EMP
   WHERE EMPNO= ARG_EMPNO;
     DBMS_OUTPUT.PUT_LINE('ARG_ENAME : '||ARG_ENAME);
END;
/
VARIABLE VAR_ENAME VARCHAR2(30);
VARIABLE VAR_SAL VARCHAR2(30);
VARIABLE VAR_JOB VARCHAR2(30);
--PROCEDURE 실행
EXEC PRO_EMP_ARG_TEST1(7369, :VAR_ENAME, :VAR_SAL, :VAR_JOB); 
--출력
PRINT VAR_ENAME;
PRINT VAR_SAL;
PRINT VAR_JOB;

DESC EMPLOYEE;

CREATE OR REPLACE PROCEDURE PRO_ALL_EMP
IS
BEGIN
    FOR E IN (SELECT * FROM EMPLOYEE) LOOP
   SELECT_EMPID(E.EMP_ID, E.EMP_NAME, E.EMP_SALARY, E.BONUS);
    END LOOP;
END;
/
EXEC PRO_ALL_EMP;
/
--구구단

BEGIN
    FOR N IN 1..9 LOOP
        FOR M IN 1..9 LOOP
         DBMS_OUTPUT.PUT_LINE(N*M);
         END LOOP;
    END LOOP;
END;
/
SELECT * FROM EMPLOYEE;
/
DECLARE
    E EMPLOYEE%ROWTYPE;
BEGIN
    SELECT * INTO E
    FROM EMPLOYEE
    WHERE EMP_ID = '&EMP_ID';
        DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || E.EMP_ID);
        DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || E.EMP_NAME);
        DBMS_OUTPUT.PUT_LINE('EMP_NO : ' || E.EMP_NO);
        DBMS_OUTPUT.PUT_LINE('SALARY : ' || E.SALARY);
        END;
        /
DECLARE 
    TYPE EMP_ID_TABLE_TYPE IS TABLE OF EMPLOYEE.EMP_ID%TYPE
    INDEX BY BINARY_INTEGER;
    TYPE EMP_NAME_TABLE_TYPE IS TABLE OF EMPLOYEE.EMP_NAME%TYPE
    INDEX BY BINARY_INTEGER;
    
    EMP_ID_TABLE EMP_ID_TABLE_TYPE;
    EMP_NAME_TABLE EMP_NAME_TABLE_TYPE;
    I BINARY_INTEGER :=0;
BEGIN
    FOR K IN (SELECT EMP_ID, EMP_NAME FROM EMPLOYEE) LOOP
    I:= I+1;
    EMP_ID_TABLE(I) := K.EMP_ID;
    EMP_NAME_TABLE(I) := K.EMP_NAME;
    END LOOP;
    FOR J IN 1..I LOOP
        DBMS_OUTPUT.PUT_LINE('EMP_ID :' ||EMP_ID_TABLE(J) ||', EMP_NAME : '||EMP_NAME_TABLE(J));
        END LOOP;
        END;
        /
CREATE TABLE EMP_DUP 
AS SELECT * FROM EMPLOYEE;
SELECT * FROM EMP_DUP;

CREATE OR REPLACE PROCEDURE DEL_ALL_EMP
IS
BEGIN

DELETE FROM EMP_DUP; 
COMMIT;

END;
/
CREATE OR REPLACE VIEW V_EMP_JOB(사번,이름,직급,성별,근무년수)
AS SELECT EMP_ID,EMP_NAME,JOB_NAME, DECODE(SUBSTR(EMP_NO,8,1),1,'남',2,'여'),
EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM HIRE_DATE)
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE);
SELECT * FROM V_EMP_JOB;

VARIABLE VAR_EMP_NAME VARCHAR2(30);
VARIABLE VAR_SALARY NUMBER;
VARIABLE VAR_BONUS NUMBER;

EXEC SELECT_EMPID(1, :VAR_EMP_NAME, :VAR_SALARY, :VAR_BONUS);